{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elohim Mickael\\\\talentmatch\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [userType, setUserType] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  // Simuler une base de données d'utilisateurs\n  const mockUsers = {\n    'candidate@example.com': {\n      email: 'candidate@example.com',\n      type: 'candidate',\n      profile: {\n        firstName: 'Jean',\n        lastName: 'Dupont',\n        completedProfile: false\n      }\n    },\n    'recruiter@example.com': {\n      email: 'recruiter@example.com',\n      type: 'recruiter',\n      profile: {\n        companyName: 'TechCorp',\n        fullName: 'Martin Dupont'\n      }\n    }\n  };\n  useEffect(() => {\n    // Vérifier si un utilisateur est déjà connecté dans le localStorage\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      const user = JSON.parse(storedUser);\n      setCurrentUser(user);\n      setUserType(user.type);\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    // Simulation de la connexion\n    const user = mockUsers[email];\n    if (user) {\n      setCurrentUser(user);\n      setUserType(user.type);\n\n      // Stocker l'utilisateur dans le localStorage\n      localStorage.setItem('currentUser', JSON.stringify(user));\n\n      // Rediriger selon le type d'utilisateur\n      if (user.type === 'candidate') {\n        if (!user.profile.completedProfile) {\n          navigate('/linkedin-profile');\n        } else {\n          navigate('/candidate-dashboard');\n        }\n      } else if (user.type === 'recruiter') {\n        navigate('/recruiter-dashboard');\n      }\n      return user;\n    } else {\n      throw new Error('Identifiants incorrects');\n    }\n  };\n  const signupCandidate = async candidateData => {\n    // Simulation de l'inscription candidat\n    const newUser = {\n      ...candidateData,\n      type: 'candidate',\n      profile: {\n        ...candidateData,\n        completedProfile: false\n      }\n    };\n\n    // Simuler l'ajout à la base de données\n    mockUsers[newUser.email] = newUser;\n\n    // Stocker l'utilisateur \n    setCurrentUser(newUser);\n    setUserType('candidate');\n    localStorage.setItem('currentUser', JSON.stringify(newUser));\n\n    // Naviguer vers la page de complétion de profil LinkedIn\n    navigate('/linkedin-profile');\n    return newUser;\n  };\n  const signupRecruiter = async recruiterData => {\n    // Simulation de l'inscription recruteur\n    const newUser = {\n      ...recruiterData,\n      type: 'recruiter',\n      profile: {\n        ...recruiterData\n      }\n    };\n\n    // Simuler l'ajout à la base de données\n    mockUsers[newUser.email] = newUser;\n\n    // Stocker l'utilisateur \n    setCurrentUser(newUser);\n    setUserType('recruiter');\n    localStorage.setItem('currentUser', JSON.stringify(newUser));\n\n    // Naviguer vers le tableau de bord recruteur\n    navigate('/recruiter-dashboard');\n    return newUser;\n  };\n  const completeLinkedInProfile = async profileData => {\n    // Mettre à jour le profil utilisateur\n    const updatedUser = {\n      ...currentUser,\n      profile: {\n        ...currentUser.profile,\n        ...profileData,\n        completedProfile: true\n      }\n    };\n    setCurrentUser(updatedUser);\n    localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n\n    // Naviguer vers le tableau de bord candidat\n    navigate('/candidate-dashboard');\n    return updatedUser;\n  };\n  const logout = () => {\n    setCurrentUser(null);\n    setUserType(null);\n    localStorage.removeItem('currentUser');\n    navigate('/login');\n  };\n  const value = {\n    currentUser,\n    userType,\n    loading,\n    login,\n    logout,\n    signupCandidate,\n    signupRecruiter,\n    completeLinkedInProfile\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n}\n_s2(AuthProvider, \"8i9YO/iL0TkU2PpGtVDkHTLAmd8=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useNavigate","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","userType","setUserType","loading","setLoading","navigate","mockUsers","email","type","profile","firstName","lastName","completedProfile","companyName","fullName","storedUser","localStorage","getItem","user","JSON","parse","login","password","setItem","stringify","Error","signupCandidate","candidateData","newUser","signupRecruiter","recruiterData","completeLinkedInProfile","profileData","updatedUser","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Elohim Mickael/talentmatch/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [userType, setUserType] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const navigate = useNavigate();\r\n\r\n  // Simuler une base de données d'utilisateurs\r\n  const mockUsers = {\r\n    'candidate@example.com': {\r\n      email: 'candidate@example.com',\r\n      type: 'candidate',\r\n      profile: {\r\n        firstName: 'Jean',\r\n        lastName: 'Dupont',\r\n        completedProfile: false\r\n      }\r\n    },\r\n    'recruiter@example.com': {\r\n      email: 'recruiter@example.com',\r\n      type: 'recruiter',\r\n      profile: {\r\n        companyName: 'TechCorp',\r\n        fullName: 'Martin Dupont'\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Vérifier si un utilisateur est déjà connecté dans le localStorage\r\n    const storedUser = localStorage.getItem('currentUser');\r\n    if (storedUser) {\r\n      const user = JSON.parse(storedUser);\r\n      setCurrentUser(user);\r\n      setUserType(user.type);\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    // Simulation de la connexion\r\n    const user = mockUsers[email];\r\n    \r\n    if (user) {\r\n      setCurrentUser(user);\r\n      setUserType(user.type);\r\n      \r\n      // Stocker l'utilisateur dans le localStorage\r\n      localStorage.setItem('currentUser', JSON.stringify(user));\r\n      \r\n      // Rediriger selon le type d'utilisateur\r\n      if (user.type === 'candidate') {\r\n        if (!user.profile.completedProfile) {\r\n          navigate('/linkedin-profile');\r\n        } else {\r\n          navigate('/candidate-dashboard');\r\n        }\r\n      } else if (user.type === 'recruiter') {\r\n        navigate('/recruiter-dashboard');\r\n      }\r\n      \r\n      return user;\r\n    } else {\r\n      throw new Error('Identifiants incorrects');\r\n    }\r\n  };\r\n\r\n  const signupCandidate = async (candidateData) => {\r\n    // Simulation de l'inscription candidat\r\n    const newUser = {\r\n      ...candidateData,\r\n      type: 'candidate',\r\n      profile: {\r\n        ...candidateData,\r\n        completedProfile: false\r\n      }\r\n    };\r\n    \r\n    // Simuler l'ajout à la base de données\r\n    mockUsers[newUser.email] = newUser;\r\n    \r\n    // Stocker l'utilisateur \r\n    setCurrentUser(newUser);\r\n    setUserType('candidate');\r\n    localStorage.setItem('currentUser', JSON.stringify(newUser));\r\n    \r\n    // Naviguer vers la page de complétion de profil LinkedIn\r\n    navigate('/linkedin-profile');\r\n    \r\n    return newUser;\r\n  };\r\n\r\n  const signupRecruiter = async (recruiterData) => {\r\n    // Simulation de l'inscription recruteur\r\n    const newUser = {\r\n      ...recruiterData,\r\n      type: 'recruiter',\r\n      profile: {\r\n        ...recruiterData\r\n      }\r\n    };\r\n    \r\n    // Simuler l'ajout à la base de données\r\n    mockUsers[newUser.email] = newUser;\r\n    \r\n    // Stocker l'utilisateur \r\n    setCurrentUser(newUser);\r\n    setUserType('recruiter');\r\n    localStorage.setItem('currentUser', JSON.stringify(newUser));\r\n    \r\n    // Naviguer vers le tableau de bord recruteur\r\n    navigate('/recruiter-dashboard');\r\n    \r\n    return newUser;\r\n  };\r\n\r\n  const completeLinkedInProfile = async (profileData) => {\r\n    // Mettre à jour le profil utilisateur\r\n    const updatedUser = {\r\n      ...currentUser,\r\n      profile: {\r\n        ...currentUser.profile,\r\n        ...profileData,\r\n        completedProfile: true\r\n      }\r\n    };\r\n    \r\n    setCurrentUser(updatedUser);\r\n    localStorage.setItem('currentUser', JSON.stringify(updatedUser));\r\n    \r\n    // Naviguer vers le tableau de bord candidat\r\n    navigate('/candidate-dashboard');\r\n    \r\n    return updatedUser;\r\n  };\r\n\r\n  const logout = () => {\r\n    setCurrentUser(null);\r\n    setUserType(null);\r\n    localStorage.removeItem('currentUser');\r\n    navigate('/login');\r\n  };\r\n\r\n  const value = {\r\n    currentUser,\r\n    userType,\r\n    loading,\r\n    login,\r\n    logout,\r\n    signupCandidate,\r\n    signupRecruiter,\r\n    completeLinkedInProfile\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}