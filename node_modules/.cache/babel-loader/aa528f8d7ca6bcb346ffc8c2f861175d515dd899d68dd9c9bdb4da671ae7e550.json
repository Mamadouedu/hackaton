{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elohim Mickael\\\\talentmatch\\\\src\\\\pages\\\\LinkedInCallback.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport Navbar from '../components/Navbar';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LinkedInCallback = () => {\n  _s();\n  const [status, setStatus] = useState('loading');\n  const [message, setMessage] = useState('Connexion avec LinkedIn en cours...');\n  const navigate = useNavigate();\n  const location = useLocation();\n  useEffect(() => {\n    // Extraire le code d'autorisation et l'état de l'URL\n    const urlParams = new URLSearchParams(location.search);\n    const code = urlParams.get('code');\n    const state = urlParams.get('state');\n    const storedState = sessionStorage.getItem('linkedin_state');\n\n    // Vérifier si l'état correspond (sécurité contre les attaques CSRF)\n    if (state !== storedState) {\n      setStatus('error');\n      setMessage('Erreur de sécurité: État non valide');\n      return;\n    }\n    if (!code) {\n      setStatus('error');\n      setMessage('Aucun code d\\'autorisation reçu de LinkedIn');\n      return;\n    }\n\n    // Échanger le code contre un token d'accès (simulation)\n    // Dans un environnement réel, cette partie serait traitée par votre backend\n    setTimeout(() => {\n      // Simulation de données LinkedIn récupérées\n      const mockLinkedInData = {\n        firstName: \"Jean\",\n        lastName: \"Dupont\",\n        email: \"jean.dupont@example.com\",\n        headline: \"Développeur Full Stack\",\n        location: \"Paris, France\",\n        industry: \"Informatique\",\n        profilePicture: \"https://via.placeholder.com/150\"\n      };\n\n      // Stocker temporairement dans sessionStorage\n      sessionStorage.setItem('linkedin_profile_data', JSON.stringify(mockLinkedInData));\n      setStatus('success');\n      setMessage('Connexion LinkedIn réussie! Redirection en cours...');\n\n      // Rediriger vers la page de création de profil avec les données LinkedIn\n      setTimeout(() => {\n        navigate('/linkedin-profile', {\n          state: {\n            linkedInData: mockLinkedInData\n          }\n        });\n      }, 1500);\n    }, 2000);\n  }, [location, navigate]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"linkedin-callback-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"linkedin-callback-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `linkedin-callback-status ${status}`,\n          children: [status === 'loading' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loader\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this), status === 'success' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"success-icon\",\n            children: \"\\u2713\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this), status === 'error' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"error-icon\",\n            children: \"!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: status === 'loading' ? 'Traitement en cours' : status === 'success' ? 'Connexion réussie' : 'Erreur de connexion'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), status === 'error' && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"retry-button\",\n          onClick: () => navigate('/candidate-signup'),\n          children: \"R\\xE9essayer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(LinkedInCallback, \"/MUPuFD/8cahlwxIk8OV/KCrth8=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = LinkedInCallback;\nexport default LinkedInCallback;\nvar _c;\n$RefreshReg$(_c, \"LinkedInCallback\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useLocation","Navbar","jsxDEV","_jsxDEV","Fragment","_Fragment","LinkedInCallback","_s","status","setStatus","message","setMessage","navigate","location","urlParams","URLSearchParams","search","code","get","state","storedState","sessionStorage","getItem","setTimeout","mockLinkedInData","firstName","lastName","email","headline","industry","profilePicture","setItem","JSON","stringify","linkedInData","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Elohim Mickael/talentmatch/src/pages/LinkedInCallback.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport Navbar from '../components/Navbar';\r\n\r\nconst LinkedInCallback = () => {\r\n  const [status, setStatus] = useState('loading');\r\n  const [message, setMessage] = useState('Connexion avec LinkedIn en cours...');\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    // Extraire le code d'autorisation et l'état de l'URL\r\n    const urlParams = new URLSearchParams(location.search);\r\n    const code = urlParams.get('code');\r\n    const state = urlParams.get('state');\r\n    const storedState = sessionStorage.getItem('linkedin_state');\r\n    \r\n    // Vérifier si l'état correspond (sécurité contre les attaques CSRF)\r\n    if (state !== storedState) {\r\n      setStatus('error');\r\n      setMessage('Erreur de sécurité: État non valide');\r\n      return;\r\n    }\r\n    \r\n    if (!code) {\r\n      setStatus('error');\r\n      setMessage('Aucun code d\\'autorisation reçu de LinkedIn');\r\n      return;\r\n    }\r\n    \r\n    // Échanger le code contre un token d'accès (simulation)\r\n    // Dans un environnement réel, cette partie serait traitée par votre backend\r\n    setTimeout(() => {\r\n      // Simulation de données LinkedIn récupérées\r\n      const mockLinkedInData = {\r\n        firstName: \"Jean\",\r\n        lastName: \"Dupont\",\r\n        email: \"jean.dupont@example.com\",\r\n        headline: \"Développeur Full Stack\",\r\n        location: \"Paris, France\",\r\n        industry: \"Informatique\",\r\n        profilePicture: \"https://via.placeholder.com/150\"\r\n      };\r\n      \r\n      // Stocker temporairement dans sessionStorage\r\n      sessionStorage.setItem('linkedin_profile_data', JSON.stringify(mockLinkedInData));\r\n      \r\n      setStatus('success');\r\n      setMessage('Connexion LinkedIn réussie! Redirection en cours...');\r\n      \r\n      // Rediriger vers la page de création de profil avec les données LinkedIn\r\n      setTimeout(() => {\r\n        navigate('/linkedin-profile', { state: { linkedInData: mockLinkedInData } });\r\n      }, 1500);\r\n    }, 2000);\r\n  }, [location, navigate]);\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className=\"linkedin-callback-container\">\r\n        <div className=\"linkedin-callback-card\">\r\n          <div className={`linkedin-callback-status ${status}`}>\r\n            {status === 'loading' && (\r\n              <div className=\"loader\"></div>\r\n            )}\r\n            {status === 'success' && (\r\n              <div className=\"success-icon\">✓</div>\r\n            )}\r\n            {status === 'error' && (\r\n              <div className=\"error-icon\">!</div>\r\n            )}\r\n          </div>\r\n          <h2>{status === 'loading' ? 'Traitement en cours' : \r\n               status === 'success' ? 'Connexion réussie' : \r\n               'Erreur de connexion'}</h2>\r\n          <p>{message}</p>\r\n          {status === 'error' && (\r\n            <button \r\n              className=\"retry-button\" \r\n              onClick={() => navigate('/candidate-signup')}\r\n            >\r\n              Réessayer\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LinkedInCallback;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}